data1=pd.read_csv("C:\\Users\\ADSL\\Downloads\\df_dm2.csv")
X = data1.drop(['readmitted'], axis=1)

y = data1['readmitted']
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)
import category_encoders as ce
encoder = ce.OrdinalEncoder(cols=['age','examide', 'citoglipton'])


X_train = encoder.fit_transform(X_train)

X_test = encoder.transform(X_test)

from sklearn.tree import DecisionTreeClassifier
clf_gini = DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=0)


# fit the model
clf_gini.fit(X_train, y_train)

y_pred_gini = clf_gini.predict(X_test)

https://gist.github.com/pb111/af439e4affb1dd94879579cfd6793770
https://stats.stackexchange.com/questions/2151/how-to-plot-roc-curves-in-multiclass-classification#
https://github.com/erhwenkuo/deep-learning-with-keras-notebooks/blob/master/1.7-autoencoder.ipynb
https://colab.research.google.com/github/rickwierenga/notebooks/blob/master/autoencoders.ipynb#scrollTo=2kWUdt_frO5q


import os
from flask import Flask, request, redirect, url_for, send_from_directory
from werkzeug.utils import secure_filename

UPLOAD_FOLDER = 'tmp/'
ALLOWED_EXTENSIONS = set(['txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'])

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1] in ALLOWED_EXTENSIONS


@app.route('/', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        # check if the post request has the file part
        if 'file' not in request.files:
            print ('no file')
            return redirect(request.url)
        file = request.files['file']
        # if user does not select file, browser also
        # submit a empty part without filename
        if file.filename == '':
            print ('no filename')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = (file.filename)
            filename='a/'+filename
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            # return redirect(url_for('uploaded_file',
            #                         filename=filename))
    return '''
    <!doctype html>
    <title>Upload new File</title>
    <h1>Upload new File</h1>
    <form action="" method=post enctype=multipart/form-data>
      <p><input type=file name=file>
         <input type=submit value=Upload>
    </form>
    '''


# @app.route('/uploads/<filename>')
# def uploaded_file(filename):
#     return send_from_directory(app.config['UPLOAD_FOLDER'],
#                                filename)


if __name__ == "__main__":
    app.run(debug=True)
